コントローラー
===========
Symfonyは薄いコントローラとファットなモデルという哲学に従います。 つまり、コントローラは、
アプリケーションの様々な部分をとりまとめるグルーコードだけからなる薄いレイヤーにするべきです。

経験則として、正確な基準はありませんが、コントローラに定義する変数は5個以下、
アクションの数が10個以下で、各アクション内の行数は20行以内という「5-10-20ルール」に従う事は
コードをコントローラからサービスにリファクタリングする際に役に立ちます。

.. best-practice::

    開発者がコントローラを作る場合``FrameworkBundle``のコントローラを継承し、
    可能な限り、ルーティング、キャッシュとセキュリティをアノテーションで設定してください。


コントローラとフレームワークを連携させることで、フレームワークの機能すべてを
活用する事を可能にし、あなたの生産性を向上させます。

そして、コントローラーは薄く、数行のグルーコードであるべきで、
フレームワークからそれらを切り離すそうとすると、時間かかるので長期的に見ると利益になりません。
大量の時間を費やすだけで、何の価値もありません。

加えて、 ルーティング、キャッシュ、セキュリティに対してアノテーションを使用すると簡単に設定する事ができます。
すべての設定は必要な場所に一つのフォーマットにすれば、YAML, XML, PHPなどの複数ファイルを見る必要がなくなります。

全体的にビジネスロジックをフレームワークから切り離すという手段は積極的に行うと
同時に、最大限に活用にするためにルーティングとコントローラは結合するべきです。

ルーティング設定
---------------------

コントローラで定義されたアノテーションを利用するにはrouting.ymlに以下の設定を追加します。

.. code-block:: yaml

    # app/config/routing.yml
    app:
        resource: "@AppBundle/Controller/"
        type:     annotation

``src/AppBundle/Controller/`` ディレクトリとそのサブディレクトリからコントローラの
アノテーションをロードします。
もしアプリケーションに多くのコントローラがある場合、それらをサブディレクトリへ移動する事が可能です。

.. code-block:: text

    <your-project>/
    ├─ ...
    └─ src/
       └─ AppBundle/
          ├─ ...
          └─ Controller/
             ├─ DefaultController.php
             ├─ ...
             ├─ Api/
             │  ├─ ...
             │  └─ ...
             └─ Backend/
                ├─ ...
                └─ ...

テンプレート設定
----------------------

.. best-practice::

    テンプレートの設定は ``@Template()`` アノテーションを使用しないでください。

``@Template``は便利ですがいくつかの魔法を伴うので、お勧めする事はできません。

ほとんどの場合、``@Template``はパラメータの設定をせず使用されます。そして設定すると、どの
テンプレートを表示するかをわかりづらくします。それはまた、必ずコントローラはレスポンスオブジェクトを
返すべきだと言う事を初心者にわかりにくくしてしまいます。(あなたがビューレイヤーを利用している場合以外)
