.. note::

    * 対象バージョン：2.3以降
    * 翻訳更新日：2014/11/03

.. index::
   single: Symfony Framework Best Practices

Symfony のベストプラクティス
============================

Symfony は *とても* 柔軟なフレームワークとして知られており、小規模サイトから何十億ものコネクションを処理するエンタープライズアプリケーションの開発で利用されています。また*他の*フレームワークの基盤にもなっています。2011年7月にリリースされて以来、コミュニティは Symfony で何ができて、何が*一番良い方法* かについて多くのことを学びました。

しかしこれらのコミュニティのリソース、たとえばブログの記事やプレゼンテーションなどが、Symfonyアプリケーションを開発する際の非公式な推奨案を生み出してきました。
残念ながらこれらの多くの推奨案は web アプリケーションにとって必要ではありません。
大抵の場合、これらの推奨案は物事をむやみに複雑化し、本来のSymfony の哲学に添っていません。

このガイドについて
------------------

このガイドは **フルスタックフレームワークSymfonyを使って web アプリケーションを開発するためのベストプラクティス** を記述することで、この状況を正すことが目的です。このベストプラクティスはフレームワークの原作者 `Fabien Potencier` によって描かれたフレームワークの哲学にのっとっています。

.. ノート::

    **ベストプラクティス** は *"最良の結果を生み出すためのよく練られたやり方"* を意味する単語です。そしてまさにこのガイドが提供しようしているそのものです。もしあなたがすべての推奨案に同意できないとしても、あなたのすばらしいアプリケーションをより少ない複雑さで構築するために役立つと思います。

このガイドは **次のような場合に特に適しています** :

* フルスタックの Symfony でウェブサイトや web アプリケーションの開発

また次のような、**Symfony を拡張しあなたの特定の用途にあわせる** ときの、**最初のポイント** としてこのガイドは調度良いかもしれません:

* Symfony コニュニティにバンドルを公開し共有するとき;
* 上級開発者やチームが彼ら自身のスタンダードを考えるとき;
* 高度なカスタマイズが必要とさえる複雑なアプリケーションを開発するとき;
* 社内限定でバンドルを共有するとき;

古い習慣が容易に滅びないということをしっていますし、あなたはベストプラクティスにショックを受けるかもしれません。しかしベストプラクティスに従えばより高速にアプリケーションを開発することができます。しかも複雑さは少なくなり場合によってはより高品質になります。改善を繰り返すという移動目標(moving target)でもあります。

これらは **任意の推奨案** であるということを覚えておいてください。あなたやあなたのチームにこれらの推奨案は合ったり合わなかったりするでしょう。もしあなた自身のベストプラクティスと方法論を使い続けたいのであればもちろんそうすることができます。Symfony はあなたのやりたいことに合わせるには十分柔軟です。変える必要は全くありません。

誰のための本か (ヒント: チュートリアルではありません)
-----------------------------------------------------

上級者であれ初級者であれ、すべての Symfony 開発者がこのガイドを読むことができます。しかし、このガイドはチュートリアルではありません。そのため Symfony の基礎知識が必要になるでしょう。全くの初心者であれば、`クイックツアー`_ チュートリアルから始めてみてください。

故意にこのガイドは短くしています。あなたが莫大な Symfony のドキュメントで見つけることができるようなこと、たとえば dependency injection や フロントコントローラーなどのようなことにつて繰り返し説明したくないからです。あなたが知っていることについてどうすべきかということにだけもっぱら説明していきます。

アプリケーション
----------------

このガイドに加えて、あなたが思うようなベストプラクティスで開発されたサンプルアプリケーションを見つけることができるでしょう。**そのアプリケーションはシンプルなブログエンジンです**。なぜシンプルなブログエンジンかというと、このアプリケーションは難しい詳細に覆われることなく Symfony のコンセプトと特徴に集中することができるからです。

このガイドでは段階的にアプリケーションを開発する代わりに、章を通して選ばれたコードのスニペットを見つけることになるでしょう。アプリケーションとインストール方法の詳細については最終章を参照してください。

既存のアプリケーションをアップデートしない
------------------------------------------

このハンドブックを読んだあとに、既存の Symfony のアプリケーションのリファクタリングについて考えるかもしれません。私達の推奨案は明確です: **ベストプラクティスに合致させるために既存アプリケーションをリファクタリングすべきでない**。この理由は様々です。:

* 既存アプリケーションは間違っていません、それらは別のガイダンスに従っているだけです;
* 完全なコードベースのリファクタリングはアプリケーションがエラーを起こす傾向がある;
* エンドユーザーに本当に価値のある機能追加やテストの改善に専念し時間を費やすほうが良い;

.. _`Fabien Potencier`: https://connect.sensiolabs.com/profile/fabpot
.. _`クイックツアー`: http://docs.symfony.gr.jp/symfony2/quick_tour/index.html
.. _`ガイドブック`: http://docs.symfony.gr.jp/symfony2/book/index.html
.. _`クックブック`: http://docs.symfony.gr.jp/symfony2/cookbook/index.html
.. _`github.com/.../...`: http://github.com/.../...

.. 2014/11/03 brtriver d12cfe535a39244553654a4d91f16c6a313cc337
